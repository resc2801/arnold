import tensorflow as tf
import numpy as np

from arnold.layers.polynomial.poly_base import PolynomialBase

tfk = tf.keras
tfkl = tfk.layers


@tfk.utils.register_keras_serializable(package="arnold", name="Charlier")
class Charlier(PolynomialBase):
    """
    Kolmogorov-Arnold Network layer using the Charlier polynomials.

    The Charlier polynomials are generated by the three-term recurrence relation:

    * :math:`C_{-1; a}(x) = 0`
    * :math:`C_{0; a}(x) = 1`
    * :math:`x * C_{n}(x; a) = C_{n+1}(x; a) + (n + a) * C_{n}(x; a) + a * n * C_{n-1}(x; a)` 

    for a>0.

    See: https://arxiv.org/pdf/1901.06041, eq. 1.4
    """

    def __init__(
            self, 
            *args,
            a_init: float | None = None, a_trainable=True, 
            **kwargs):
        
        super().__init__(*args, **kwargs)

        self.a_init = a_init
        self.a_trainable = a_trainable

        self.a = self.add_weight(
            initializer=tfk.initializers.Constant(value=self.a_init) if self.a_init else tfk.initializers.RandomNormal(mean=0.0, stddev=1.0, seed=None),
            name='a',
            trainable=self.a_trainable,
            regularizer=None,
            constraint=None,
        )

    @tf.function
    def poly_basis(self, x):

        # :math:`a > 0`
        a = tf.exp(self.a)
        
        # :math:`C_{-1; a}(x) = 0`
        # :math:`C_{0; a}(x) = 1`
        charlier_basis = [
            tf.ones_like(x)
        ]

        if self.degree > 0:
            # :math`C_{1}(x; a) = (x - (n + a)) * C_{0}(x; a) - a*n*C_{-1}(x; a)`
            charlier_basis.append(
                (x - (1 + a))  
            )
        
        for n in range(2, self.degree + 1):
            # :math:`x * C_{n}(x; a) = C_{n+1}(x; a) + (n + a) * C_{n}(x; a) + a * n * C_{n-1}(x; a)` 
            charlier_basis.append(
                (x - (n + a)) * charlier_basis[n-1] - a * n * charlier_basis[n-2]
            )

        return tf.stack(charlier_basis, axis=-1)
    
    def get_config(self):
        config = super().get_config()
        config.update({
            "a_init": self.a_init,
            "a_trainable": self.a_trainable,
        })
        return config
