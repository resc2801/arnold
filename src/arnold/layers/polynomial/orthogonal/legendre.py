import tensorflow as tf
import numpy as np
from tensorflow.python.ops import array_ops


from arnold.layers.polynomial.poly_base import PolynomialBase

tfk = tf.keras
tfkl = tfk.layers


@tfk.utils.register_keras_serializable(package="arnold", name="Legendre")
class Legendre(PolynomialBase):
    """
    Kolmogorov-Arnold Network layer using Legendre polynomials.

    The Legendre polynomials are generated by the three-term recurrence relation:

    * :math:`P_{0}(x) = 1`
    * :math:`P_{1}(x) = x`
    * :math:`P_{n+1}(x) = \frac{(2n + 1) * x * P_{n}(x) - n * P_{n-1}(x)}{n+1}` when n >= 1

    See also: https://en.wikipedia.org/wiki/Legendre_polynomials#Definition_via_generating_function
    """

    @tf.function
    def poly_basis(self, x):
        """
        Evaluate Legendre basis polynomials for given `x`."""

        # :math:`P_{0}(x) = 1`
        legendre_basis = [ tf.ones_like(x) ]
        
        if self.degree > 0:
            # :math:`P_{1}(x) = x`
            legendre_basis.append(x)

        for n in range(2, self.degree + 1):
            # :math:`P_{n+1}(x) = \frac{(2n + 1) * x * P_{n}(x) - n * P_{n-1}(x)}{n+1}` when n >= 1
            legendre_basis.append((((2 * n - 1) * x * legendre_basis[n-1]) - ((n - 1) * legendre_basis[n-2])) / n)

        return tf.stack(legendre_basis, axis=-1)
