import tensorflow as tf
import numpy as np

from ..poly_base import PolynomialBase

tfk = tf.keras
tfkl = tfk.layers


@tfk.utils.register_keras_serializable(package="arnold", name="Hermite")
class Hermite(PolynomialBase):
    """
    Kolmogorov-Arnold Network layer using (physicist's) Hermite polynomials.

    The (physicist's) Hermite polynomials are generated by the three-term recurrence relation:

    {\displaystyle H_{n+1}(x)=2\,x\,H_{n}(x)-2\,n\,H_{n-1}(x)}

    * :math:`{H_{0}(x) = 1}`
    * :math:`{H_{1}(x) = 2x}`
    * :math:`{H_{n+1}(x) = 2 * x * H_{n}(x) - 2 * n * H_{n-1}(x)}` when n >= 0

    See also: https://en.wikipedia.org/wiki/Hermite_polynomials#Recurrence_relation
    """

    @tf.function
    def poly_basis(self, x):
        # :math:`H_{0}(x) = 1`
        hermite_basis = [ tf.ones_like(x) ]

        if self.degree > 0:
            # :math:`H_{1}(x) = x`
            hermite_basis.append(
                2.0 * x
            )

        for n in range(2, self.degree + 1):
            # :math:`{H_{n+1}(x) = 2 * x * H_{n}(x) - 2 * n * H_{n-1}(x)}` 
            hermite_basis.append(
                (2 * x * hermite_basis[n-1]) - (2 * (n - 1) * hermite_basis[n-2])
            )
        
        return tf.stack(hermite_basis, axis=-1)
