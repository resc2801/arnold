import tensorflow as tf
import numpy as np

from ..poly_base import PolynomialBase

tfk = tf.keras
tfkl = tfk.layers


@tfk.utils.register_keras_serializable(package="arnold", name="Pollaczek")
class Pollaczek(PolynomialBase):
    r"""
    Kolmogorov-Arnold Network layer using Pollaczek polynomials.

    The Pollaczek polynomials are generated by the three-term recurrence relation:

    * :math:`P_{0}(x; a, b) = 1`
    * :math:`P_{1}(x; a, b) = (2 * a + 1) * x + 2 * b`
    * :math:`P_{n}(x;a,b) = \frac{[(2n-1+2a)x+2b]P_{n-1}(x;a,b)-(n-1)P_{n-2}(x;a,b) }{n}, \, n \geq 2`

    See also: https://mathworld.wolfram.com/PollaczekPolynomial.html
    """

    def __init__(
            self, 
            *args,
            a_init: float | None = None, a_trainable=True, 
            b_init: float | None = None, b_trainable=True,
            **kwargs):
        """
        :param input_dim: This layers input size
        :type input_dim: int

        :param output_dim: This layers output size
        :type output_dim: int

        :param degree: The maximum degree of the polynomial basis element (default is 3).
        :type degree: int

        :param decompose_weights: Whether or not to represent the polynomial_coefficients weights tensor as a learnable Tucker decomposition. Default to False.
        :type decompose_weights: bool

        :param core_ranks: A 3-tuple of non-zero, positive integers giving the ranks of the Tucker decomposition core tensor. Ignored if `decompose_weights` is False; defaults to None.
        :type core_ranks: None | Tuple[int, int, int]

        :param tanh_x: Flag indicating whether to normalize any input to [-1, 1] using tanh before further processing.
        :type tanh_x: bool

        :param a_init: Initial value for the a parameter of the Pollaczek polynomials. Defaults to None (a initialized to RandomNormal).
        :type a_init: float | None = None

        :param a_trainable: Flag indicating whether a is a trainable parameter. Defaults to True
        :type a_trainable: bool

        :param b_init: Initial value for the b parameter of the Pollaczek polynomials. Defaults to None (a initialized to RandomNormal).
        :type b_init: float | None = None

        :param b_trainable: Flag indicating whether b is a trainable parameter. Defaults to True
        :type b_trainable: bool
        """ 
        super().__init__(*args, **kwargs)

        self.a_init = a_init
        self.a_trainable = a_trainable
        self.b_init = b_init
        self.b_trainable = b_trainable

        self.a = self.add_weight(
            initializer=tfk.initializers.Constant(value=self.a_init) if self.a_init else tfk.initializers.RandomNormal(mean=0.0, stddev=1.0, seed=None),
            name='a',
            trainable=self.a_trainable
        )

        self.b = self.add_weight(
            initializer=tfk.initializers.Constant(value=self.b_init) if self.b_init else tfk.initializers.RandomNormal(mean=0.0, stddev=1.0, seed=None),
            name='b',
            trainable=self.b_trainable
        )

    @tf.function
    def pseudo_vandermonde(self, x):
        # :math:`P_{0}(x; a, b) = 1`
        pollaczek_basis = [ tf.ones_like(x) ]
        
        if self.degree > 0:
            # :math:`P_{1}(x; a, b) = (2 * a + 1) * x + 2 * b`
            pollaczek_basis.append(
                (2 * self.a + 1) * x + 2 * self.b
            )

        for n in range(2, self.degree + 1):
            # :math:`P_{n}(x;a,b) = \frac{[(2n-1+2a)x+2b]P_{n-1}(x;a,b)-(n-1)P_{n-2}(x;a,b) }{n} when n >= 2
            pollaczek_basis.append(
                (((2 * n - 1 + 2 * self.a) * x + 2* self.b) * pollaczek_basis[n-1] - (n-1) * pollaczek_basis[n-2]) / n
            )

        return tf.stack(pollaczek_basis, axis=-1)

    def get_config(self):
        config = super().get_config()
        config.update({
            "a_init": self.a_init,
            "a_trainable": self.a_trainable,
            "b_init": self.b_init,
            "b_trainable": self.b_trainable,
        })
        return config
